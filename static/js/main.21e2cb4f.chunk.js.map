{"version":3,"sources":["components/ReadOnlyRow.js","components/EditableRow.js","App.js","index.js"],"names":["ReadOnlyRow","contact","handleEditClick","handleDeleteClick","fullName","address","phoneNumber","email","type","onClick","event","id","EditableRow","editFormData","handleEditFormChange","handleCancelClick","required","placeholder","name","value","onChange","App","useState","data","contacts","setContacts","addFormData","setAddFormData","setEditFormData","editContactId","setEditContactId","handleAddFormChange","preventDefault","fieldName","target","getAttribute","fieldValue","newFormData","formValues","contactId","newContacts","index","findIndex","splice","className","onSubmit","editedContact","map","newContact","nanoid","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21e2cb4f.chunk.js","sourcesContent":["import React from 'react';\n\nconst ReadOnlyRow = ({ contact, handleEditClick, handleDeleteClick }) => {\n  return (\n    <tr>\n      <td>{contact.fullName}</td>\n      <td>{contact.address}</td>\n      <td>{contact.phoneNumber}</td>\n      <td>{contact.email}</td>\n      <td>\n        <button\n          type=\"button\"\n          onClick={(event) => handleEditClick(event, contact)}>\n            Редактировать\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => handleDeleteClick(contact.id)}>Удалить</button>\n      </td>\n    </tr>\n  );\n};\n\nexport default ReadOnlyRow;\n","import React from 'react';\n\nconst EditableRow = ({ editFormData, handleEditFormChange, handleCancelClick }) => {\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"text\"\n          required=\"required\"\n          placeholder=\"Введите имя\"\n          name=\"fullName\"\n          value={editFormData.fullName}\n          onChange={handleEditFormChange}\n        />\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          name=\"address\"\n          required=\"required\"\n          placeholder=\"Введите адрес\"\n          value={editFormData.address}\n          onChange={handleEditFormChange}\n        />\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          name=\"phoneNumber\"\n          required=\"required\"\n          placeholder=\"Введите номер\"\n          value={editFormData.phoneNumber}\n          onChange={handleEditFormChange}\n        />\n      </td>\n      <td>\n        <input\n          type=\"email\"\n          name=\"email\"\n          required=\"required\"\n          placeholder=\"Введите email\"\n          value={editFormData.email}\n          onChange={handleEditFormChange}\n        />\n      </td>\n      <td>\n        <button type=\"submit\">Сохранить</button>\n        <button\n          type=\"button\"\n          onClick={handleCancelClick}>\n            Отмена\n          </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default EditableRow;\n","import React, { useState, Fragment } from \"react\";\nimport \"./App.css\";\nimport data from \"./mock-data.json\";\nimport { nanoid } from \"nanoid\";\nimport ReadOnlyRow from './components/ReadOnlyRow';\nimport EditableRow from './components/EditableRow';\n\nconst App = () => {\n\n  const [contacts, setContacts] = useState(data);\n  const [addFormData, setAddFormData] = useState({\n    fullName: '',\n    address: '',\n    phoneNumber: '',\n    email: '',\n  });\n\n  const [editFormData, setEditFormData] = useState({\n    fullName: '',\n    address: '',\n    phoneNumber: '',\n    email: '',\n  });\n\n  const [editContactId, setEditContactId] = useState(null);\n\n  const handleAddFormChange = (event) => {\n    event.preventDefault();\n    const fieldName = event.target.getAttribute('name');\n    const fieldValue = event.target.value;\n\n    const newFormData = {...addFormData};\n    newFormData[fieldName] = fieldValue;\n\n    setAddFormData(newFormData);\n  };\n\n  const handleAddFormSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      fullName: addFormData.fullName,\n      address: addFormData.address,\n      phoneNumber: addFormData.phoneNumber,\n      email: addFormData.email\n    };\n\n    const newContacts = [...contacts, newContact];\n    setContacts(newContacts);\n  };\n\n  const handleEditFormSubmit = (event) => {\n    event.preventDefault();\n\n    const editedContact = {\n      id: editContactId,\n      fullName: editFormData.fullName,\n      address: editFormData.address,\n      phoneNumber: editFormData.phoneNumber,\n      email: editFormData.email\n    };\n\n    const newContacts = [...contacts];\n    const index = contacts.findIndex((contact) => contact.id === editedContact.id);\n\n    newContacts[index] = editedContact;\n\n    setContacts(newContacts);\n    setEditContactId(null);\n  };\n\n  const handleEditFormChange = (event) => {\n    event.preventDefault();\n    const fieldName = event.target.getAttribute('name');\n    const fieldValue = event.target.value;\n\n    const newFormData = {...editFormData};\n    newFormData[fieldName] = fieldValue;\n\n    setEditFormData(newFormData);\n  }\n\n  const handleEditClick = (event, contact) => {\n    event.preventDefault();\n    setEditContactId(contact.id);\n\n    const formValues = {\n      fullName: contact.fullName,\n      address: contact.address,\n      phoneNumber: contact.phoneNumber,\n      email: contact.email,\n    }\n\n    setEditFormData(formValues);\n  };\n\n  const handleCancelClick = () => {\n    setEditContactId(null);\n  };\n\n  const handleDeleteClick = (contactId) => {\n    const newContacts = [...contacts];\n    const index = contacts.findIndex((contact) => contact.id === contactId);\n\n    newContacts.splice(index, 1);\n\n    setContacts(newContacts);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <form onSubmit={handleEditFormSubmit}>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Address</th>\n              <th>Phone number</th>\n              <th>Email</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {contacts.map((contact) => (\n              <Fragment key={contact.id}>\n                { editContactId === contact.id ?\n                  (<EditableRow\n                    editFormData={editFormData}\n                    handleEditFormChange={handleEditFormChange}\n                    handleCancelClick={handleCancelClick} />\n                ) : (\n                    <ReadOnlyRow\n                    contact={contact}\n                    handleEditClick={handleEditClick}\n                    handleDeleteClick={handleDeleteClick} />\n                )}\n              </Fragment>\n            ))}\n          </tbody>\n        </table>\n      </form>\n\n      <h2>Добавить контакт</h2>\n      <form onSubmit={handleAddFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"fullName\"\n          required=\"required\"\n          placeholder=\"Введите имя\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"address\"\n          required=\"required\"\n          placeholder=\"Введите адрес\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"text\"\n          name=\"phoneNumber\"\n          required=\"required\"\n          placeholder=\"Введите номер\"\n          onChange={handleAddFormChange}\n        />\n        <input\n          type=\"email\"\n          name=\"email\"\n          required=\"required\"\n          placeholder=\"Введите email\"\n          onChange={handleAddFormChange}\n        />\n        <button type=\"submit\">Добавить</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}